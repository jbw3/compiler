const GLOBAL_CONST1 = true;
const GLOBAL_CONST2 bool = false;
const GLOBAL_CONST3 i32 = 1_234;
const Person = struct
{
    name str,
    age u32,
};

extern fun extern_function(x i16, asdf bool, string str) i32;

extern fun extern_function2(a u8, b u16, c u32, d u64);

fun doNothing()
{
}

fun one() i32
{
    1
}

fun passThru(x i32) i32
{
    x
}

fun passThruReturn(x i32) i32
{
    return x;
}

fun funCalls1()
{
    one();
    passThru(1);
}

fun funCalls2() i32
{
    one();
    multi_args(true, false, 0x_0a7C_2380_ABCD_FF00);
    passThru(10_000)
}

fun multi_args(b1 bool, b2 bool, y u64)
{
}

fun operators(x i32, y i32, z i32) i32
{
    x * 2 - -y + z
}

fun operator_precedence(x i32, y i32, z i32, p Person)
{
    var a = x * y + z;
    var b = x + y * z;
    var c = x * (y + z);
    var d = x + y - z;
    var e = x + (y - z);
    var f = (x + y) * (x - y);
    var g i8 = (10..20).Start;
    var h = (&p).name;
}

fun floats() f64
{
    var f1 f64 = 1.23;
    var f2 f64 = -72.092;
    return f1 + f2;
}

fun strings()
{
    var s1 str = "";
    var s2 str = "Is this a test?";
    var s3 str = "\t\r\n\\\"\'";
    var s4 str = "caf√©";
    var s5 str = "\x4a\x42\x57";
    var s6 str = "\u{a}\u{30}\u{3c0}\u{20BF}\u{1F600}";
}

fun constants()
{
    const c1 i8 = 123;
    const c2 i32 = 456;
}

fun branches1(x i32, y i32)
{
    if x == y
    {
        doNothing();
    }
}

fun branches2(x i32, y i32) i32
{
    if x == y
    {
        0
    }
    else
    {
        1
    }
}

fun branches3(x i32, y i32) i32
{
    if x < y
    {
        -1
    }
    elif x > y
    {
        1
    }
    else
    {
        0
    }
}

fun whileLoop(x i32)
{
    while x > 0
    {
        if x % 2 == 0
        {
            funCalls1();
        }
        elif x == 5
        {
            continue;
        }
        elif x == 1_001
        {
            break;
        }
        x -= 1;
    }
}

fun forLoop(num i32)
{
    for x in 0..<num
    {
        whileLoop(x);
    }
    for x i32, i usize in 0..<num
    {
        whileLoop(x);
    }
}

fun vars() i32
{
    var x i8 = 2;
    var y i16 = -12;
    x * y
}

fun casts(x bool, y i32)
{
    var b bool = @cast(bool, y + 2);
    var i = @cast(i32, x);
    unchecked
    {
        var ptr = @intToPtr(&i32, 0xabcd);
    }
}

fun structs(num u32) usize
{
    var p1 = Person:
    {
        name = "Joe",
        age = num / 2,
    };
    p1.name.Size
}

fun arrays(x i8, y i16)
{
    var a1 = [128; false];
    var a2 []i32 = [0, x * 27 + y, passThru(8), @cast(i32, a1[17])];
}

fun test1()
{
}

fun test2() i32
{
    0
}

fun test3(x i32, y u16, z bool)
{
}

fun test4(x i32) i32
{
    x
}

fun test5() fun() i32
{
    test2
}

fun function_types()
{
    var f1 fun() = test1;
    f1();
    var f2 fun() i32 = test2;
    f2();
    var f3 fun(a i32, b u16, c bool) = test3;
    f3(1, 2, true);
    var f4 fun(a i32) i32 = test4;
    f4(0);
    var f5 = test4;
    f5(0);
    var x = test5()();
}
