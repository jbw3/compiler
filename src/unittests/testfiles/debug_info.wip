fun noParams() i32
{
    0
}

fun param(param1 u8) u16
{
    param1
}

fun operators(x i32, y i64, z i8) i64
{
    -x + y / (x * z)
}

fun whileLoop(a i32, b i32) i32
{
    while a > 0
    {
        b *= 3;
        a -= 1;
    }

    b
}

fun types()
{
    var b bool   = true;
    var x0 i8    = 0;
    var x1 i16   = 1;
    var x2 i32   = 2;
    var x3 i64   = 3;
    var x4 isize = 4;
    var x5 u8    = 5;
    var x6 u16   = 6;
    var x7 u32   = 7;
    var x8 u64   = 8;
    var x9 usize = 9;
    var s str    = "abc";
}

fun structType(n i64)
{
    var t = TestStruct
    {
        num1: 12,
        num2: n,
        flag: true,
    };
}

struct TestStruct
{
    num1 i32,
    num2 i64,
    flag bool,
}

fun ranges(n i32)
{
    var r1 = 0..n;
    var r2 = -n..<n * 3;
}

fun forLoop(n i32) i32
{
    var a i32 = 0;
    for i in 0..n
    {
        for j in n..10
        {
            a += i * j;
        }
    }

    a
}

# test struct dependencies with pointers
struct A { n i32, b B }
struct B { n i32, c C }
struct C { n i32, a &A }

fun pointerStructTest(a A)
{
}

fun pointers(x i32)
{
    var ptr = &x;
    *ptr = 17;
}

fun break_and_continue()
{
    for i i8 in 0..7
    {
        if i == 5
        {
            break;
        }
        elif i == 2
        {
            continue;
        }

        noParams();
    }

    var j i8 = 1;
    while j < 100
    {
        if j % 7 == 0
        {
            continue;
        }

        if j > 89
        {
            break;
        }

        noParams();

        j += 1;
    }
}

fun ret1(a i16, b i16) i32
{
    var rv = a + b;
    return rv;
}

fun ret2(a i32, p &i32)
{
    if a < 0
    {
        return;
    }
    ; # TODO: fix bug so this is not needed
    *p = a;
}

fun arrays(a []u16)
{
    var n = a[0];
    a[1] = n * 2;
}

fun forIndex(a []u32) usize
{
    var num usize = 0;
    for x, i in a
    {
        num += x * i;
    }

    num
}

fun casts(a i32)
{
    var x = cast(i8, a);
}

fun ftype1(){}
fun ftype2()bool{false}

fun function_type()
{
    var f1 = ftype1;
    f1();
    var f2 = ftype2;
    f2();
}
