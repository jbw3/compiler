fun noArgs() i32
{
    42
}

fun oneArg(x i32) i32
{
    x + 2
}

fun integerLiterals(x i32) i32
{
    0b101 + x + 0o370 + x + 123 + x + 0xa57F93
}

fun twoArgs(arg1 i32, arg2 i32) i32
{
    arg1 - arg2
}

fun opOrder1(a i32, b i32, c i32, d i32) i32
{
    a + b * c - d
}

fun opOrder2(a i32, b i32, c i32, d i32) i32
{
    a + b * c - d / a + b % 42
}

fun opOrder3(a i32, b i32, c i32, d i32) bool
{
    a == b + c * d
}

fun opOrder4(a i32, b i32, c i32, d i32) i32
{
    a | b ^ c & d
}

fun opOrder5(a i32, b i32, c i32, d i32) i32
{
    ( -(a + b) + opOrder6(a, b, c, d) ) * d
}

fun opOrder6(a i32, b i32, c i32, d i32) i32
{
    (a | b) ^ (c & d)
}

fun negatives(a i32, b i32, c i32) i32
{
    -a - -b * -oneArg(2 + -c)
}

fun not(a i32, b i32) i32
{
    !a & !b | !noArgs()
}

fun equal(a i32, b i32) bool
{
    a == b
}

fun notEqual(a i32, b i32) bool
{
    a != b
}

fun lessThan(a i32, b i32) bool
{
    a < b
}

fun lessThanOrEqual(a i32, b i32) bool
{
    a <= b
}

fun greaterThan(a i32, b i32) bool
{
    a > b
}

fun greaterThanOrEqual(a i32, b i32) bool
{
    a >= b
}

fun logicalAnd2(x i32, y i32, z i32) bool
{
    x != 0 && y < z + 5
}

fun logicalAnd3(x i32, y i32, z i32) bool
{
    x == 0 && y == 1 && z == 2
}

fun logicalOr2(x i32, y i32, z i32) bool
{
    z == 0 || x + y / z < 100
}

fun logicalOr3(x i32, y i32, z i32) bool
{
    x == 0 || y == 1 || z == 2
}

fun nestedCall(x i32, y i32, z i32) i32
{
    twoArgs(0, x) + twoArgs(y + 42, z - 57)
}

fun call_function_defined_later(a bool, b bool) bool
{
    types_bool(a, b)
}

fun types_bool(a bool, b bool) bool
{
    a | b
}

fun types_i8(n1 i8, n2 i8) i8
{
    n1 + n2
}

fun types_i16(n1 i16, n2 i16) i16
{
    n1 - n2
}

fun types_i32(n1 i32, n2 i32) i32
{
    n1 * n2
}

fun types_i64(n1 i64, n2 i64) i64
{
    n1 / n2
}

fun sign_extend_bin_op(a i8, b i16, c i64, d i32) i64
{
    a * b / c % d
}

fun sign_extend_ret(param i32) i64
{
    param + 5
}

fun sign_extend_call(param i8) i64
{
    sign_extend_ret(param)
}

fun basicBranch(x i32, y i32, z i32) i32
{
    if x + 1 == y / 2
    {
        z * 10
    }
    else
    {
        -z
    }
}

fun nestedBranches(x i32, y i32, z i32) i32
{
    if x == 0
    {
        y + z
    }
    else
    {
        if x == 1
        {
            y - z
        }
        else
        {
            y * z
        }
    }
}

fun elseIfBranches(x i32, y i32, z i32) i32
{
    if x == 0
    {
        y + z
    }
    else if x == 1
    {
        y - z
    }
    else if x == 2
    {
        y * z
    }
    else
    {
        42
    }
}

fun elseIfBranchesNesting(x i32, y i32, z i32) i32
{
    if x == 0
    {
        y + z
    }
    else if x == 1
    {
        y - z
    }
    else if x == 2
    {
        y * z
    }
    else if x == 3
    {
        if z == 0
        {
            0
        }
        else
        {
            y / z
        }
    }
    else
    {
        if z == 0
        {
            0
        }
        else
        {
            y % z
        }
    }
}

fun branchWithLogicalOperators(x i32, y i32, z i32) i32
{
    if x == 0 && y == 1 || z == 1
    {
        100
    }
    else
    {
        200
    }
}
