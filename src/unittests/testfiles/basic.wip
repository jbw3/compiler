fun noArgs() i32
{
    42
}

fun oneArg(x i32) i32
{
    x + 2
}

fun integerLiterals(x i32) i32
{
    0b101 + x + 0o370 + x + 123 + x + 0x_a5_7F93
}

# test trailing command in parameter list
fun twoArgs(arg1 i32, arg2 i32,) i32
{
    arg1 - arg2
}

fun opOrder1(a i32, b i32, c i32, d i32) i32
{
    a + b * c - d
}

fun opOrder2(a i32, b i32, c i32, d i32) i32
{
    a + b * c - d / a + b % 42
}

fun opOrder3(a i32, b i32, c i32, d i32) bool
{
    a == b + c * d
}

fun opOrder4(a i32, b i32, c i32, d i32, e i32, f i32) i32
{
    a | b ^ c & d << e >> f >>> a
}

fun opOrder5(a i32, b i32, c i32, d i32) i32
{
    ( -(a + b) + opOrder6(a, b, c, d) ) * d
}

fun opOrder6(a i32, b i32, c i32, d i32) i32
{
    (a | b) ^ (c & d)
}

fun negatives(a i32, b i32, c i32) i32
{
    -a - -b * -oneArg(2 + -c)
}

fun not(a i32, b i32) i32
{
    !a & !b | !noArgs()
}

fun equal(a i32, b i32) bool
{
    a == b
}

fun notEqual(a i32, b i32) bool
{
    a != b
}

fun lessThan(a i32, b i32) bool
{
    a < b
}

fun lessThanOrEqual(a i32, b i32) bool
{
    a <= b
}

fun greaterThan(a i32, b i32) bool
{
    a > b
}

fun greaterThanOrEqual(a i32, b i32) bool
{
    a >= b
}

fun logicalAnd2(x i32, y i32, z i32) bool
{
    x != 0 && y < z + 5
}

fun logicalAnd3(x i32, y i32, z i32) bool
{
    x == 0 && y == 1 && z == 2
}

fun logicalOr2(x i32, y i32, z i32) bool
{
    z == 0 || x + y / z < 100
}

fun logicalOr3(x i32, y i32, z i32) bool
{
    x == 0 || y == 1 || z == 2
}

fun assignOps(a i8, b i16, c i32)
{
    c += a;
    c -= a + b;
    c *= a;
    c /= a + b;
    c %= a;
    c <<= a + b;
    c >>= a;
    c >>>= b;
    c &= a + b;
    c ^= a;
    c |= a + b;
}

fun nestedCall(x i32, y i32, z i32) i32
{
    twoArgs(0, x) + twoArgs(y + 42, z - 57,) # test trailing comma in function call
}

fun call_function_defined_later(a bool, b bool) bool
{
    types_bool(a, b)
}

fun types_unit(number i64)
{
}

fun types_unit2()
{
    types_unit(123)
}

fun types_bool(a bool, b bool) bool
{
    a | b
}

fun types_i8(n1 i8, n2 i8) i8
{
    n1 + n2
}

fun types_i16(n1 i16, n2 i16) i16
{
    n1 - n2
}

fun types_i32(n1 i32, n2 i32) i32
{
    n1 * n2
}

fun types_i64(n1 i64, n2 i64) i64
{
    n1 / n2
}

fun types_isize(n1 isize, n2 isize) isize
{
    n1 % n2
}

fun types_u8(n1 u8, n2 u8) u8
{
    n1 % n2
}

fun types_u16(n1 u16, n2 u16) u16
{
    n1 / n2
}

fun types_u32(n1 u32, n2 u32) u32
{
    n1 * n2
}

fun types_u64(n1 u64, n2 u64) u64
{
    n1 - n2
}

fun types_usize(n1 usize, n2 usize) usize
{
    n1 + n2
}

fun types_str()
{
    var s1 str = ""; # empty string
    var s2 str = "Is this a test?"; # simple chars
    var s3 str = "\t\r\n\\\"\'"; # escape sequences
    var s4 str = "café"; # unicode
    var s5 str = "\x4a\x42\x57"; # byte escape sequences
    var s6 str = "\u{a}\u{30}\u{3c0}\u{20BF}\u{1F600}"; # unicode escape sequences

    # these should point to the same constant
    var dup1 str = "abc";
    var dup2 str = "abc";
}

fun types_range(b bool)
{
    var x1 i32 = 10;
    var x2 i32 = 13;
    var y1 u32 = 25;
    var y2 u32 = 39;

    # closed ranges
    var er1 = 39..124; # with int literals
    var er2 = 0..x1;   # one int literal and one variable
    var er3 = x1..x2;  # two int literals

    # half-open ranges
    var ir1 = 1..<10;  # with int literals
    var ir2 = 0..<y1;  # one int literal and one variable
    var ir3 = y1..<y2; # two int literals
    var ir4 = -x2..x1 + x2; # expressions

    # test sign extension
    var r1 = if b { 0..3 } else { 100..200 };
}

fun str_member1() usize
{
    var s str = "abc";
    var size usize = s.Size;
    size
}

fun str_member2(x i32) usize
{
    if x == 0
    {
        "abc"
    }
    else
    {
        "café"
    }.Size
}

fun types_add_literal(num i8) i8
{
    # make sure we can add a constant literal to a number with a small size
    num + 1
}

fun sign_extend_bin_op(a i8, b i16, c i64, d i32) i64
{
    a * b / c % d
}

fun sign_extend_ret(param i32) i64
{
    param + 5
}

fun sign_extend_call(param i8) i64
{
    sign_extend_ret(param)
}

fun basicBranch(x i32, y i32, z i32) i32
{
    if x + 1 == y / 2
    {
        z * 10
    }
    else
    {
        -z
    }
}

fun signExtendBranch(b bool, x i16, y i16) i64
{
    if b
    {
        types_i16(x, y)
    }
    else
    {
        types_i32(x, y)
    }
}

fun nestedBranches(x i32, y i32, z i32) i32
{
    if x == 0
    {
        y + z
    }
    else
    {
        if x == 1
        {
            y - z
        }
        else
        {
            y * z
        }
    }
}

fun elseIfBranches(x i32, y i32, z i32) i32
{
    if x == 0
    {
        y + z
    }
    elif x == 1
    {
        y - z
    }
    elif x == 2
    {
        y * z
    }
    else
    {
        42
    }
}

fun noElseBranches(x i32, y i32) i32
{
    var z i32 = 0;
    if x == 0
    {
        z = x + y;
    }

    if y < -5
    {
        z *= 2;
    }
    elif y > 5
    {
        z /= 2;
    }

    z
}

fun elseIfBranchesNesting(x i32, y i32, z i32) i32
{
    if x == 0
    {
        y + z
    }
    elif x == 1
    {
        y - z
    }
    elif x == 2
    {
        y * z
    }
    elif x == 3
    {
        if z == 0
        {
            0
        }
        else
        {
            y / z
        }
    }
    else
    {
        if z == 0
        {
            0
        }
        else
        {
            y % z
        }
    }
}

fun branchInExpression(x i32, y i32, z i32) i32
{
    if x == 0
    {
        y
    }
    else
    {
        z
    } + 58
}

fun branchWithLogicalOperators(x i32, y i32, z i32) i32
{
    if x == 0 && y == 1 || z == 1
    {
        100
    }
    else
    {
        200
    }
}

fun assign(a i32, b i32, c i32) i32
{
    a = b * c;
    b = a + 3 * b + c;
    c = c + 42;
    c
}

fun assignWithBranch(a i32, b i32, c i64) i64
{
    c =
        if b <= 0
        {
            a * b + c
        }
        else
        {
            a / b - c
        };
    c = c * 2;
    c
}

fun assignInBranch(a i32, b i32, c i32) i32
{
    c =
        if a <= 0
        {
            b = 0xA;
            c + 1
        }
        else
        {
            b = 10_000;
            c + 2
        };
    c = b * c;
    c
}

fun createVars(num i32) i64
{
    var rv i64 =
        if num < 0
        {
            var temp1 i32 = num * 10;
            temp1
        }
        else
        {
            var temp2 i64 = num / 10;
            temp2
        };
    rv
}

fun inferTypes(a i32, b i32) i32
{
    var n8 = 0;
    var n16 = 200;
    var n32 = 1_000_000;
    var n64 = 3_000_000_000;

    var unaryOps = !!200;

    var bIsZero = b == 0;
    var quotient =
        if bIsZero
        {
            0
        }
        else
        {
            a / b
        };

    quotient
}

fun whileLoop(num i32) i32
{
    var i i32 = 0;
    var rv i32 = 1;
    while i < num
    {
        rv = rv * 2;
        i = i + 1;
    }

    rv
}

fun nestedLoop(num i32) i32
{
    var i i32 = 0;
    var rv i32 = 1;
    while i < num
    {
        rv = if i % 2 == 0 {rv * 2} else {rv * 3};

        var j i32 = 0;
        while j < i
        {
            rv = rv + 1;
            j = j + 1;
        }

        i = i + 1;
    }

    rv
}

fun whileComplexCondition(s str, c u8) usize
{
    var idx usize = 0;
    while idx < s.Size && s[idx] != c
    {
        idx += 1;
    }

    idx
}

fun forLoop(start i32, end i32) i32
{
    var num i32 = 1;
    for i in start..end
    {
        num *= i;
    }

    num
}

fun forLoopArray(a [i32]) i32
{
    var sum i32 = 0;

    for x in [1, 2, 3]
    {
        sum += x;
    }

    for x i16 in [10, 20, 30]
    {
        sum += x;
    }

    for x in a
    {
        sum += x;
    }

    return sum;
}

fun nestedForLoop() u32
{
    var x u32 = 0;
    for i u32 in 0..<5
    {
        for j u32 in 1..10
        {
            x += i * j;
        }
    }

    x
}

fun forLoopIndex(array [i32]) usize
{
    for x, i in array
    {
        array[i] = x * 2;
    }

    var num usize = 0;
    for x u32, i usize in 0..<10
    {
        num += x * i;
    }

    num
}

fun blockExpression(param i32) i32
{
    var x i32 = {
        types_unit(100);
        types_bool(param > 0, param % 12 == 5);
        types_i32(param, param)
    };

    x
}

extern fun extern1();

fun externTest() u64
{
    # call extern function declared before this function
    extern1();

    # call extern function declared after this function
    extern2(5, true)
}

# test trailing command in parameter list
extern fun extern2(p1 i32, p2 bool,) u64;

fun scopes(x i32) i32
{
    var rv i32 = 0;
    if x < 0
    {
        var y i32 = 5;
        rv = y;
    }
    else
    {
        var y i16 = 12;
        rv = y;
    }

    rv
}

fun initTypes()
{
    var empty EmptyType = EmptyType { };

    var test1 Test1 = Test1
    {
        c: "café",
        a: types_i16(1, 2),
        b: true
    };

    var test2 Test2 = Test2
    {
        test: Test1
        {
            a: 1,
            b: false,
            c: "abc",
        },
        n: 12,
    };

    test1.b = false;
    test2.test.a += 7;
}

struct EmptyType {}

struct Test2
{
    test Test1,
    n i32,
}

struct Test1
{
    a i32,
    b bool,
    c str
}

# int literal types sign/zero extension
fun sign_zero_extension(b bool, x8 i8, y8 u8, x32 i32)
{
    var r1 i32 = if b { x8 } else { 200 };
    var r2 u32 = if b { y8 } else { 200 };

    var r3 i32 = x8 + 20;
    var r4 u32 = y8 + 20;

    var r5 i32 = x8 + 200;
    var r6 u32 = y8 + 200;

    var r7 i16 = 200 + 1;
    var r8 u16 = 200 + 1;

    var r9 = x32..x32; # make a range of i32..i32
    r9 = if b { 0..1 } else { 1..2 };
    r9 = if b { 0..1 } else { 1..1_000 };
    r9 = if b { 0..1 } else { x32..x32 };
}

# test correct instruction is used for signed/unsigned operands
fun sign_operator(x8 i8, y8 u8)
{
    var r1 i32 = 200 / x8;
    var r2 u32 = 200 / y8;
}

# test unary operators
fun unary_operator(b bool, x i8, y u8)
{
    var r1 i32 = if b { x } else { -200 };

    var r2 i32 = x + -200;

    var r3 i32 = -20;
    var r4 i32 = --20;

    var r5 i32 = -200;
    var r6 i32 = --200;

    var r7 i32 = !20;
    var r8 i32 = !!20;
    var r9 u32 = !20;
    var r10 u32 = !!20;

    var r11 i32 = !200;
    var r12 i32 = !!200;
    var r13 u32 = !200;
    var r14 u32 = !!200;

    var r15 i32 = x + !!200;
    var r16 u32 = y + !!200;
}

fun pointers(p1 &i32) &i32
{
    var p2 = p1;
    var equal = p1 == p2;

    var x = 2;
    var xPtr = &x;
    *xPtr += 5;

    var test = Test1
    {
        a: *xPtr,
        b: true,
        c: "abc"
    };

    var bPtr1 &bool = &test.b;
    var bPtr2 &&bool = &bPtr1;
    var b = **bPtr2;

    p1
}

fun subscript(s str, t SubscriptTest1)
{
    var x u8 = s[0];
    var y u8 = t.s.s[5];
}

struct SubscriptTest1 { s SubscriptTest2, }
struct SubscriptTest2 { s str, }

fun break_and_continue()
{
    for i in 0..10
    {
        for j in 0..7
        {
            if j == 4
            {
                continue;
            }

            noArgs();
        }

        if i == 8
        {
            break;
        }
    }

    var k i32 = 0;
    while k < 17
    {
        if k == 3
        {
            continue;
        }
        elif k == 10
        {
            break;
        }

        noArgs();

        k += 1;
    }
}

fun ret1(a i32, b i32) i32
{
    if a < b
    {
        return -1;
    }
    elif a > b
    {
        return 1;
    }

    return 0;
}

fun ret2(a i32, b i32) i32
{
    if a < b
    {
        return -1;
    }
    elif a > b
    {
        return 1;
    }

    0
}

fun arrays1(a1 [i32])
{
    var n = a1[0];
    a1[1] = 17;
}

struct ArrayTest { arr [i32] }

fun arrays2()
{
    var x i32 = 12;

    var a1 [i32] = [10; x];
    var a2 [i32] = [0; x];
    var a3 [i16] = [3; 1 + 200];
    var a4 [i32] = [3; 1 + x * 2];
    var a5 [i32] = [4; 0];

    arrays1([12; 1]);

    var s = ArrayTest { arr: [3; 19] };

    arrays1([12; 123][4..<7]);

    var r1 = [5; 7][3];
}

fun arrays3()
{
    var x i16 = 12;
    var y i32 = 123;

    var a1 [i8] = [1, -2];
    var a2 [u8] = [1, 2];
    var a3 [i16] = [20, x + 1];
    var a4 [i32] = [3, 1 + y * 2];

    arrays1([10, 20, 30]);

    var s = ArrayTest { arr: [1, 2, 3] };

    arrays1([10, 20, 30, 40, 50][1..3]);

    var r1 = [100, 200][0];

    var a6 [[i32]] = [[10, 20], [30, 40]];
    var a7 [[i32]] = [[2; 8], [3; 9]];
}

fun slices(array [i32], s str, start u32, end u32)
{
    var a1 = array[start..end];
    var a2 [i32] = array[start..<end];
    var a3 = a2[start+1..end-1];

    var s1 = s[start..end];
}

fun casts(x i16, y u16, b bool)
{
    var c1 = cast(i32, x);
    var c2 = cast(i32, y);
    var c3 = cast(i32, b);

    var c4 = cast(u32, x);
    var c5 = cast(u32, y);
    var c6 = cast(u32, b);

    var c7 = cast(bool, x);
    var c8 = cast(bool, y);
    var c9 = cast(bool, b);

    var c10 = cast(i8, x);
    var c11 = cast(i8, y);
    var c12 = cast(i8, b);
}

const global_constant1 = 9;
const global_constant2 i32 = 0x7a;

fun consts()
{
    const c1 = 12;
    const c2 = 1_000;
    const c3 i32 = c2;
    const c4 = true;
    const c5 u32 = 13;
    const c6 = "abc";
    const c7 = 1 + c1 * 2 / -(995 - c2) + c1 % 10;
    const c8 = ((c1 >> 2) | (c1 << 1)) ^ 0x6;
    const c9 = global_constant1 & global_constant2;
    const c10 = c4 & !c4 ^ true | false;

    var v1 = c1;
    var v2 = c2;
    var v3 = c3;
    var v4 = c4;
    var v5 = global_constant1;
    var v6 = global_constant2;
    var v7 = c6;
    var v8 = c7;
    var v9 = c8;
    var v10 = c9;
    var v11 = c10;

    var a1 [i32] = [c5; 0];
}
